(* Remember to re-run
   python2 scripts/extract_record_notation.py theories/local_state.v.rec UState > theories/local_state.v
   after editing this file!
   Running `make theories/local_state.v` should take care of this for you. *)

From mathcomp.ssreflect
Require Import all_ssreflect.

From Coq Require Import Reals.Reals.

Section LocalState.

Variable UserId : Type.
Variable Value : Type.
Variable PropRecord : Type.
Variable Vote : Type.

Record UState :=
  mkUState {
    (* A flag indicating whether the user is corrupt *)
    corrupt       : bool;
    (* The user's current round (starts at 1) *)
    round         : nat;
    (* The user's current period (starts at 1) *)
    period        : nat;
    (* The user's current step counter (starts at 1) *)
    step          : nat;
    (* The user's current timer value (since the beginning of the current period) *)
    timer         : R;
    (* The user's next deadline time value (since the beginning of the current period) *)
    deadline      : R;
    (* The (local) time at which the user's current period started (i.e. local clock = p_start + timer *)
    p_start       : R;
    (* A sequence of proposal/reproposal records for the given round/period *)
    proposals     : nat -> nat -> seq PropRecord;
    (* Starting value *)
    stv           : nat -> option Value;
    (* A sequence of values seen for the given round *)
    blocks        : nat -> seq Value;
    (* A sequence of softvotes seen for the given round/period *)
    softvotes     : nat -> nat -> seq Vote;
    (* A sequence of certvotes seen for the given round/period *)
    certvotes     : nat -> nat -> seq Vote;
    (* A sequence of bottom-nextvotes seen for the given round/period/step *)
    nextvotes_open: nat -> nat -> nat -> seq UserId;
    (* A sequence of value-nextvotes seen for the given round/period/step *)
    nextvotes_val : nat -> nat -> nat -> seq Vote
   }.

End LocalState.
